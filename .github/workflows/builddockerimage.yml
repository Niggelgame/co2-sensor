name: Build Data Docker Image and Publish

on:
  push:
    branches: [ master ]

jobs:
  check-data:
    name: Check files for data server
    outputs:
      run_job: ${{ steps.check_files.outputs.run_job }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: check modified files
        id: check_files
        run: |
          echo "=============== list modified files ==============="
          git diff --name-only HEAD^ HEAD
          
          echo "========== check paths of modified files =========="
          git diff --name-only HEAD^ HEAD > files.txt
          while IFS= read -r file
          do
            echo $file
            if [[ $file != data/** ]]; then
              echo "This modified file is not under the 'data' folder."
              echo "::set-output name=run_job::false"
            else
              echo "::set-output name=run_job::true"
              break
            fi
          done < files.txt
  check-app:
    name: Check files for app
    outputs:
      run_job: ${{ steps.check_files.outputs.run_job }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: check modified files
        id: check_files
        run: |
          echo "=============== list modified files ==============="
          git diff --name-only HEAD^ HEAD
          
          echo "========== check paths of modified files =========="
          git diff --name-only HEAD^ HEAD > files.txt
          while IFS= read -r file
          do
            echo $file
            if [[ $file != app/** ]]; then
              echo "This modified file is not under the 'app' folder."
              echo "::set-output name=run_job::false"
            else
              echo "::set-output name=run_job::true"
              break
            fi
          done < files.txt
  check-sensoring:
    name: Check files for the sensoring tool
    outputs:
      run_job: ${{ steps.check_files.outputs.run_job }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: check modified files
        id: check_files
        run: |
          echo "=============== list modified files ==============="
          git diff --name-only HEAD^ HEAD
          
          echo "========== check paths of modified files =========="
          git diff --name-only HEAD^ HEAD > files.txt
          while IFS= read -r file
          do
            echo $file
            if [[ $file != sensoring/** ]]; then
              echo "This modified file is not under the 'sensoring' folder."
              echo "::set-output name=run_job::false"
            else
              echo "::set-output name=run_job::true"
              break
            fi
          done < files.txt

  build:
    needs: check-data
    if: needs.check-data.outputs.run_job == 'true'
    runs-on: ubuntu-18.04
    env:
      DOCKER_REGISTRY: ghcr.io
      DOCKER_IMAGE: niggelgame/co2-data-image
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      DOCKER_TARGET_PLATFORM: linux/arm/v7
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # https://github.com/docker/setup-qemu-action
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Prepare      
        if: success()      
        id: prepare      
        run: |        
          echo ::set-output name=docker_platform::${DOCKER_TARGET_PLATFORM}        
          echo ::set-output name=docker_image::${DOCKER_REGISTRY}/${DOCKER_IMAGE}        
          echo ::set-output name=version::${GITHUB_RUN_NUMBER}  

      - name: Docker Login      
        if: success()      
        run: |        
          echo "${DOCKER_PASSWORD}" | docker login ${DOCKER_REGISTRY} --username "${DOCKER_USERNAME}" --password-stdin

      - name: Push Image
        if: success()      
        run: |        
          cd data
          docker buildx build \
                  --platform ${{ steps.prepare.outputs.docker_platform }} \
                  --tag ${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.version }} \
                  --file ./Dockerfile \
                  --output type=image,push=true .

  build-sensor:
    needs: check-sensoring
    if: needs.check-sensoring.outputs.run_job == 'true'
    runs-on: ubuntu-18.04
    env:
      DOCKER_REGISTRY: ghcr.io
      DOCKER_IMAGE: niggelgame/co2-sensoring-image
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      DOCKER_TARGET_PLATFORM: linux/arm/v7
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: "3.9.5"
      
      - name: Install pipenv
        run: |
          python -m pip install --upgrade pipenv wheel

      - name: freeze pipfile
        run: |
          cd sensoring
          pipenv lock -r > requirements.txt

      # https://github.com/docker/setup-qemu-action
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Prepare      
        if: success()      
        id: prepare      
        run: |        
          echo ::set-output name=docker_platform::${DOCKER_TARGET_PLATFORM}        
          echo ::set-output name=docker_image::${DOCKER_REGISTRY}/${DOCKER_IMAGE}        
          echo ::set-output name=version::${GITHUB_RUN_NUMBER}  

      - name: Docker Login      
        if: success()      
        run: |        
          echo "${DOCKER_PASSWORD}" | docker login ${DOCKER_REGISTRY} --username "${DOCKER_USERNAME}" --password-stdin

      - name: Push Image
        if: success()      
        run: |        
          cd sensoring
          docker buildx build \
                  --platform ${{ steps.prepare.outputs.docker_platform }} \
                  --tag ${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.version }} \
                  --file ./Dockerfile \
                  --output type=image,push=true .

  build-ios-app:
    needs: check-app
    if: needs.check-app.outputs.run_job == 'true'
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - name: Bundle install
        run: cd ./app/ios && bundle install
      - name: Setup JDK
        uses: actions/setup-java@v1
        with:
          java-version: "12.x"
      - name: Setup flutter
        uses: subosito/flutter-action@v1
        with:
          channel: "stable"
      - name: Install tools
        run: |
          cd ./app
          flutter pub get
          flutter pub run build_runner build
          flutter build ios --release --no-codesign
          cd ./ios && pod install

      - name: Setup SSH Keys and known_hosts for fastlane match
        run: |
          SSH_PATH="$HOME/.ssh"
          mkdir -p "$SSH_PATH"
          touch "$SSH_PATH/known_hosts"
          echo "$PRIVATE_KEY" > "$SSH_PATH/id_rsa"
          chmod 700 "$SSH_PATH"
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          chmod 600 "$SSH_PATH/known_hosts"
          chmod 600 "$SSH_PATH/id_rsa"
          eval $(ssh-agent)
          ssh-add "$SSH_PATH/id_rsa"
        env:
          PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to TestFlight
        run: |
          cd ./app/ios && bundle exec fastlane beta
        env:
          TEAM_ID: ${{ secrets.TEAM_ID }}
          ITC_TEAM_ID: ${{ secrets.ITC_TEAM_ID }}
          FASTLANE_USER: ${{ secrets.FASTLANE_USER }}
          FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
          FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD }}
          FASTLANE_SESSION: ${{ secrets.FASTLANE_SESSION }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          MATCH_KEYCHAIN_NAME: ${{ secrets.MATCH_KEYCHAIN_NAME }}
          MATCH_KEYCHAIN_PASSWORD: ${{ secrets.MATCH_KEYCHAIN_PASSWORD }}
          DELIVER_ITMSTRANSPORTER_ADDITIONAL_UPLOAD_PARAMETERS: ${{ secrets.DELIVER_ITMSTRANSPORTER_ADDITIONAL_UPLOAD_PARAMETERS }}

  build-android-app:
    needs: check-app
    if: needs.check-app.outputs.run_job == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: 12.x
      - name: Decrypt Android keys
        run: sh ./.github/scripts/decrypt_android_keys.sh
        env:
          ANDROID_KEYS_SECRET_PASSPHRASE: ${{ secrets.ANDROID_GPG_KEY }}
      - name: Setup flutter
        uses: subosito/flutter-action@v1
        with:
          channel: "stable"
      - name: Install tools
        run: |
          cd ./app
          flutter pub get
          flutter pub run build_runner build
        run: flutter build apk --release
      - name: Run Fastlane
        uses: maierj/fastlane-action@v1.4.0
        with:
          lane: closed_beta
          subdirectory: app/android